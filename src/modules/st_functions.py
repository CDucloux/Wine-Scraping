"""
Module g√©rant les fonctions Streamlit de l'application.
"""
import ast
import streamlit as st
import polars as pl
from pathlib import Path
from bear_cleaner import *
from streamlit.delta_generator import DeltaGenerator

# TODO: Faire une fonction load_data avec le d√©corateur @st.cache_data pour √©viter de recharger le df tt le temps
# TODO: -- Impossible actuellement...Regarder comment changer la couleur dans un DataFrame, notamment pour prix & Type de vin
# TODO: Faire une carte de la provenance des vins


@st.cache_data
def load_df() -> pl.DataFrame:
    """Charge notre DataFrame clean."""
    root = Path(".").resolve()
    data_folder = root / "data"
    df = pl.read_json(data_folder / "vins.json")
    df = super_pipe(df)
    return df


def page_config() -> None:
    """Configure le titre et le favicon de l'application."""
    return st.set_page_config(page_title="Vins √† la carte", page_icon="üçá")


def remove_white_space() -> DeltaGenerator:
    """Utilise du CSS pour retirer de l'espace non-utilis√©"""
    return st.markdown(
        """
        <style>
                .block-container {
                    padding-top: 1rem;
                    padding-bottom: 0rem;
                    padding-left: 0rem;
                    padding-right: 0rem;
                }
                .css-1544g2n.eczjsme4 {
                    padding-top: 0.75rem;
                    padding-right: 1rem;
                    padding-bottom: 1rem;
                    padding-left: 1rem;
                }
        </style>
        """,
        unsafe_allow_html=True,
    )


def sidebar_wine_selector():
    """Permet de s√©lectionner un type de vin."""
    wine_types = ["Vin Blanc", "Vin Rouge", "Vin Ros√©"]
    return st.multiselect(
        "S√©lectionnez un type de vin :",
        wine_types,
        default="Vin Rouge",
        placeholder="Choisir un type de vin",
    )


def sidebar_prices_slider(df: pl.DataFrame):
    """Permet de choisir un intervalle de prix."""
    return st.slider(
        "S√©lectionnez un intervalle de prix :",
        df.select("unit_price").min().item(),
        df.select("unit_price").max().item(),
        (10.0, 400.0),
        format="%.2f‚Ç¨",
    )


def sidebar_checkbox_bio():
    """Une case √† cocher pour n'inclure que les vins bios."""
    bio = st.sidebar.checkbox("N'inclure que les vins Bio üåø")
    if bio:
        filter_bio = 1
    else:
        filter_bio = {0, 1}
    return filter_bio


def sidebar_checkbox_new():
    """Une case √† cocher pour n'inclure que les nouveaut√©s."""
    new = st.sidebar.checkbox("N'inclure que les nouveaut√©s üÜï")
    if new:
        filter_new = 1
    else:
        filter_new = {0, 1}
    return filter_new


def sidebar_checkbox_fav():
    """Une case √† cocher pour n'inclure que les coups de coeur client."""
    fav = st.sidebar.checkbox("N'inclure que les Coups de Coeur")
    if fav:
        filter_fav = 1
    else:
        filter_fav = {0, 1}
    return filter_fav


def sidebar_input_wine() -> str:
    """Un user input permettant de rechercher un nom de vin."""
    user_input = st.text_input("Recherche par nom de vin :").upper()
    return user_input


def sidebar_year_selector(df: pl.DataFrame) -> list:
    """Un multis√©lecteur permettant de choisir entre diff√©rents mill√©simes."""
    return st.multiselect(
        "Mill√©sime",
        df.select(pl.col("millesime").unique()).to_series().to_list(),
        placeholder="Choisissez une/plusieurs ann√©es",
        default=[2019, 2020, 2021, 2022],
    )


def main_wine_metric(df: pl.DataFrame, wine_type: str) -> list:
    """Permet d'obtenir une m√©trique du nombre de vins selon le type de vin."""
    wine_count = (
        df.group_by(pl.col("type"))
        .count()
        .sort("count", descending=True)
        .filter(pl.col("type") == wine_type)
        .select("count")
        .item()
    )
    news = (
        df.filter(pl.col("is_new") == 1)
        .group_by("type")
        .count()
        .sort("count", descending=True)
        .filter(pl.col("type") == wine_type)
        .select("count")
        .item()
    )

    if wine_type == "Vin Rouge":
        colored_text = f":red[{wine_type}]"
    elif wine_type == "Vin Blanc":
        colored_text = f":orange[{wine_type}]"
    else:
        colored_text = wine_type
    return st.metric(
        colored_text,
        wine_count,
        f"{news} nouveaut√©s !",
    )


def write_price(df: pl.DataFrame, selected_wines: list[str]) -> None:
    """Retourne le prix moyen d'un vin de la s√©lection."""
    mean_price = df.select(pl.col("unit_price")).mean().item()
    if mean_price == None:
        return st.write("Le prix moyen d'un vin de la s√©lection est *incalculable*.")
    else:
        return st.write(
            "Le prix moyen d'un",
            " / ".join(selected_wines).lower(),
            " de la s√©lection est de ",
            f'`{str(round(mean_price, 2)).replace(".", ",")} ‚Ç¨`.',
        )


def write_table(df: pl.DataFrame) -> DeltaGenerator:
    """Retourne une table de donn√©es avec des colonnes configur√©es."""
    return st.dataframe(
        data=df,
        hide_index=True,
        column_order=[
            "name",
            "unit_price",
            "picture",
            "capacity",
            "type",
            "millesime",
            "conservation_time",
            "keywords",
            "cepage",
            "bio",
            "is_new",
            "customer_fav",
            "destock",
            "service",
            "avg_temp",
            "alcohol_volume",
            "accords_vins",
            "gouts",
            "oeil",
            "nez",
            "bouche",
            "country",
            "wine_note",
        ],
        column_config={
            "name": "Nom du Vin üçæ",
            "unit_price": st.column_config.NumberColumn(
                "Prix Unitaire üí∞",
                help="Le prix du vin √† l'unit√© en euros",
                format="%.2f ‚Ç¨",
            ),
            "picture": st.column_config.ImageColumn(
                "Bouteille", help="Pr√©visualisation de la bouteille", width="medium"
            ),
            "capacity": st.column_config.NumberColumn(
                "Capacit√© üö∞",
                format="%.3f L",
                help="Capacit√© de la bouteille (En Litres)",
            ),
            "type": "Type",
            "millesime": st.column_config.NumberColumn("Mill√©sime", format="%d"),
            "conservation_time": st.column_config.NumberColumn(
                "Dur√©e de conservation üìÜ", format="%d ans"
            ),
            "keywords": st.column_config.ListColumn("Mots-cl√©s"),
            "cepage": "C√©page Majoritaire",
            "bio": st.column_config.CheckboxColumn(
                "Vin Bio üå±", help="Savoir si le vin poss√®de un label bio"
            ),
            "is_new": st.column_config.CheckboxColumn("Nouveaut√© üÜï"),
            "customer_fav": st.column_config.CheckboxColumn("Coup de Coeur Client ‚ô•"),
            "destock": st.column_config.CheckboxColumn("Destockage üì¶"),
            "service": "Service üßä",
            "avg_temp": st.column_config.NumberColumn(
                "Temp√©rature Moyenne",
                help="Temp√©rature Moyenne de la bouteille",
                format="%.1f degr√©s",
            ),
            "alcohol_volume": st.column_config.ProgressColumn(
                "Degr√© d'alcool", min_value=0, max_value=20, format="%.2f¬∞"
            ),
            "accords_vins": "Description üìÑ",
            "gouts": "Go√ªts",
            "oeil": "A l'oeil",
            "nez": "Au nez",
            "bouche": "En bouche",
            "country": "Pays d'origine du vin",
            "wine_note": st.column_config.NumberColumn(
                "Note du Vin",
                help="Note du vin /5",
                format="%.1f ‚≠ê",
            ),
        },
    )

def write_table_ml(chemin_csv):
    """Retourne un tableau avec les r√©sultats des mod√®les"""
    df = pl.read_csv(chemin_csv)
    st.dataframe(
        data = df,
        hide_index=True,
        column_order=["Mod√®le","Score", "Ecart-Type"],
        column_config={
            "Mod√®le": "Mod√®le üß∞",
            "Score" : st.column_config.ProgressColumn(
                "Score üé∞", min_value = -1, max_value=1,  format="%.2f",
                help = "score ‚àà [-1,1]"
            ),
            "Ecart-Type" : "Ecart-Type ‚Üî"
        }
    )
    
def parametres(df, j):
    """Construction du tableau des param√®tres"""
    parametres = ast.literal_eval(df["Param√®tres"][j])
    param = []
    value = []
    for key in list(parametres.keys()):
        param.append(key)
        value.append(str(parametres[key]))
    tab = pl.DataFrame({'Param√®tres': param, 'Valeur': value})
    return st.dataframe(tab,hide_index=True)
    
def write_parameter(chemin_csv):
    """Retourne un tableau avec les param√®tres d'un mod√®le"""
    df = pl.read_csv(chemin_csv)
    selected_model = st.selectbox("Consultez les param√®tres :", df["Mod√®le"])

    if selected_model == "Random Forest":
        parametres(df, 0)
    elif selected_model == "K Neighbors":
        parametres(df, 1)
    elif selected_model == "R√©seaux de neurones":
        parametres(df, 2)
    elif selected_model == "Boosting":
        parametres(df, 3)
    elif selected_model == "Ridge":
        parametres(df, 4)
    elif selected_model == "Support Vector":
        parametres(df, 5)
        
def corr_plot():
    """Retourne un plot de corr√©lation"""
    df = load_df()
    variables = ["capacity", "unit_price","millesime", "avg_temp",
                "conservation_date", "bio","customer_fav", "is_new",
                "top_100","destock","sulphite_free", "alcohol_volume",
                "bubbles"]
    df_drop_nulls = df[variables].drop_nulls()
    return variables, df_drop_nulls