"""
`st_tables` : Le module qui g√©n√®re les tableaux de l'application üóÉ
"""


import streamlit as st
import ast
import polars as pl
from streamlit.delta_generator import DeltaGenerator


def write_table(df: pl.DataFrame) -> DeltaGenerator:
    """Retourne une table de donn√©es avec des colonnes configur√©es."""
    return st.dataframe(
        data=df,
        hide_index=True,
        column_order=[
            "name",
            "unit_price",
            "picture",
            "capacity",
            "type",
            "millesime",
            "conservation_time",
            "keywords",
            "cepage",
            "bio",
            "is_new",
            "customer_fav",
            "destock",
            "service",
            "avg_temp",
            "alcohol_volume",
            "accords_vins",
            "gouts",
            "oeil",
            "nez",
            "bouche",
            "country",
            "wine_note",
        ],
        column_config={
            "name": "Nom du Vin üçæ",
            "unit_price": st.column_config.NumberColumn(
                "Prix Unitaire üí∞",
                help="Le prix du vin √† l'unit√© en euros",
                format="%.2f ‚Ç¨",
            ),
            "picture": st.column_config.ImageColumn(
                "Bouteille", help="Pr√©visualisation de la bouteille", width="medium"
            ),
            "capacity": st.column_config.NumberColumn(
                "Capacit√© üö∞",
                format="%.3f L",
                help="Capacit√© de la bouteille (En Litres)",
            ),
            "type": "Type",
            "millesime": st.column_config.NumberColumn("Mill√©sime", format="%d"),
            "conservation_time": st.column_config.NumberColumn(
                "Dur√©e de conservation üìÜ", format="%d ans"
            ),
            "keywords": st.column_config.ListColumn("Mots-cl√©s"),
            "cepage": "C√©page Majoritaire",
            "bio": st.column_config.CheckboxColumn(
                "Vin Bio üå±", help="Savoir si le vin poss√®de un label bio"
            ),
            "is_new": st.column_config.CheckboxColumn("Nouveaut√© üÜï"),
            "customer_fav": st.column_config.CheckboxColumn("Coup de Coeur Client ‚ô•"),
            "destock": st.column_config.CheckboxColumn("Destockage üì¶"),
            "service": "Service üßä",
            "avg_temp": st.column_config.NumberColumn(
                "Temp√©rature Moyenne",
                help="Temp√©rature Moyenne de la bouteille",
                format="%.1f degr√©s",
            ),
            "alcohol_volume": st.column_config.ProgressColumn(
                "Degr√© d'alcool", min_value=0, max_value=20, format="%.2f¬∞"
            ),
            "accords_vins": "Description üìÑ",
            "gouts": "Go√ªts",
            "oeil": "A l'oeil",
            "nez": "Au nez",
            "bouche": "En bouche",
            "country": "Pays d'origine du vin",
            "wine_note": st.column_config.NumberColumn(
                "Note du Vin",
                help="Note du vin /5",
                format="%.1f ‚≠ê",
            ),
        },
    )


def write_table_ml(chemin_csv) -> DeltaGenerator:
    """Retourne un tableau avec les r√©sultats des mod√®les"""
    df = pl.read_csv(chemin_csv)
    return st.dataframe(
        data=df,
        hide_index=True,
        column_order=[
            "Mod√®le",
            "Score Entrainement",
            "Ecart-Type Train",
            "Score Test",
            "Ecart-Type Test",
            "Score Test data",
        ],
        column_config={
            "Mod√®le": "Mod√®le üß∞",
            "Score Entrainement": st.column_config.ProgressColumn(
                "Score Train üèãüèª‚Äç‚ôÇÔ∏è",
                min_value=-1,
                max_value=1,
                format="%.2f",
                help="score ‚àà [-1,1]",
            ),
            "Ecart-Type Train": "SD Train",
            "Score Test": st.column_config.ProgressColumn(
                "Score Test üë®üèª‚Äçüî¨",
                min_value=-1,
                max_value=1,
                format="%.2f",
                help="score ‚àà [-1,1]",
            ),
            "Ecart-Type Test": "SD Test",
            "Score Test data": "M√©trique üè≠",
        },
    )


def parametres(df, place_model) -> DeltaGenerator:
    """Construction du tableau des param√®tres"""
    parametres = ast.literal_eval(df["Param√®tres"][place_model])
    param = list()
    value = list()
    for key in list(parametres.keys()):
        param.append(key)
        value.append(str(parametres[key]))
    tab = pl.DataFrame({"Param√®tres ‚öíÔ∏è": param, "Valeur optimale ‚≠ê": value})
    return st.dataframe(tab, hide_index=True)


def write_parameter(chemin_csv, mode):
    """Retourne un tableau avec les param√®tres d'un mod√®le"""
    df = pl.read_csv(chemin_csv)
    df = df.filter(df["Mode"] == mode)

    col1, col2 = st.columns([1, 2])
    with col1:
        selected_model = st.radio(
            "Consultez les param√®tres optimaux",
            [
                "Boosting",
                "Random Forest",
                "K Neighbors",
                "Support Vector",
                "R√©seaux de neurones",
                "Ridge",
            ],
        )
    with col2:
        if selected_model == "Random Forest":
            parametres(df, 0)
        elif selected_model == "K Neighbors":
            parametres(df, 1)
        elif selected_model == "R√©seaux de neurones":
            parametres(df, 2)
        elif selected_model == "Boosting":
            parametres(df, 3)
        elif selected_model == "Ridge":
            parametres(df, 4)
        elif selected_model == "Support Vector":
            parametres(df, 5)
