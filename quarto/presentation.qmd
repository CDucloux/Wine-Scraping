---
title: "üç∑ √Ä boire üçª"
subtitle: "*L'histoire d'un breuvage*"
author: "`Guillaume DEVANT` & `Corentin DUCLOUX`"
format: 
    revealjs:
        theme: serif
        background-transition: fade
        transition: slide
        navigation-mode: linear
        footer: "**Machine Learning**"
        logo: https://corentinducloux.fr/dossier_img/mecen_transparent.png
---


## Introduction {background-image="img\territoire_vin.png" background-opacity="0.5"}

<link rel="stylesheet" 
href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">


- Une immersion en territoire alcoolis√© s'impose...
<div style="display: flex; justify-content: center; align-items: center; height: 90vh;">
<iframe width="800" height="380" src="https://www.youtube.com/embed/mZ6xNxpuIOQ" title="Bodh&#39;Aktan - √Ä boire" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>

- *‚ÄúPour savoir qu'un verre √©tait de trop, encore faut-il l'avoir bu.‚Äù* - Georges Courteline

## Le *Pourquoi* du *Comment* {background-image="img\bouteille_dieu.png" background-opacity="0.5"}

- Le 18 janvier approche, une date en apparence anodine mais tr√®s importante pour nos deux comp√®res.
- Pour cette journ√©e festive, nos 2 protagonistes se rendirent sur `vinatis.com` pour trouver un breuvage.
- Et c'est √† ce moment que l'histoire prend **racine**...

::: {.fragment}
::: {.fragment .grow}
![](img\racine.jpg){fig-align="center" height="120"}
:::
::: {.fragment}
**On parle de moi ?**
:::
:::

## Scraping {background-image="img\bouteille_scrap.png" background-opacity="0.5"}

## Scraping, Partie I {.smaller}

`scraping_functions` $\Rightarrow$ Le coeur du scraper

1. Construit des URL avec *query parameters* en utilisant le package `yarl`.

```python
URL_INIT = URL.build(scheme="https", host="vinatis.com")
WHITE = "achat-vin-blanc"
RED = "achat-vin-rouge"
ROSE = "achat-vin-rose"

>>> URL_INIT / WHITE % {"page": 1, "tri": 7}
... URL('https://vinatis.com/achat-vin-blanc?page=1&tri=7')
```

2. `create_session` cr√©e une session HTML avec un User-Agent et un Proxy al√©atoire, pouvant changer entre les requ√™tes.
3. Poss√®de un d√©corateur `@random_waiter(min, max)` permettant de g√©n√©rer un temps d'attente al√©atoire entre les deux bornes sp√©cifi√©es entre chaque requ√™te **GET** pour √©viter d'envoyer trop de requ√™tes dans un laps de temps r√©duit.
4. `create_all_wine_urls` permet de cr√©er l'ensemble des liens **href**.
5. `export_wine_links` permet d'exporter ces liens dans un fichier CSV.

## Scraping, Partie II {.smaller}

1. On va ensuite requ√™ter ces liens **href** avec `extract_all_pages` et r√©cup√©rer les pages brutes en HTML.
2. La fonction `scraping` du module `mystical_soup` va permettre d'extraire toutes les informations int√©ressantes de la page brute et renvoyer la dataclass `Vin` s√©rialisable en *JSON*.

<i class="fa-solid fa-wine-bottle"></i> *Exemple* d'un `Vin` et ses caract√©ristiques s√©rialis√©s en *JSON* :

```json
{
        "name": "PINOT NOIR 2019 LAS PIZARRAS - ERRAZURIZ",
        "capacity": "0,75 L",
        "price": "94,90 ‚Ç¨",
        "price_bundle": null,
        "characteristics": "Vin Rouge / Chili / Central Valley / Aconcagua Valley DO / 13,5 % vol / 100% Pinot noir",
        "note": null,
        "keywords": [
            "El√©gance",
            "Finesse",
            "Harmonie"
        ],
        "others": null,
        "picture": "https://www.vinatis.com/67234-detail_default/pinot-noir-2019-las-pizarras-errazuriz.png",
        "classification": null,
        "millesime": "2019",
        "cepage": "100% Pinot noir",
        "gouts": "Rouge Charnu et fruit√©",
        "par_gouts": "Puissant",
        "oeil": "Robe rubis aux reflets violets.",
        "nez": "Nez complexe sur la griotte, les √©pices et les champignons (truffe).",
        "bouche": "Bouche fruit√©e et florale. Tanins structur√©s, √©l√©gants et fins. finale harmonieuse et persistante.",
        "temperature": "8-10¬∞C",
        "service": "En bouteille ou en carafe",
        "conservation_1": "2026",
        "conservation_2": "A boire et √† garder",
        "accords_vins": "Ap√©ritif, Entr√©e, Charcuterie, Viande rouge, Viande blanche, Volaille, Gibier, Champignon, Barbecue, Cuisine du monde, Fromage, Dessert fruit√©, Dessert chocolat√©",
        "accords_reco": "Gigot d'agneau aux herbes de Provence; Tikka massala; Plateau de fromages."
    }
```

## Cleaning {.smaller background-image="img\pandas_vs_polars.png" background-opacity="0.25"}

Mais ce *JSON* **brut** doit √™tre nettoy√© et consid√©rablement restructur√© !

1. Nous avons choisi d'utiliser `polars` üêª et non pas `pandas` üêº pour le faire.
2. Toutes les fonctions de nettoyage sont contenues dans `bear_cleaner.py`.
3. La fonction `super_pipe` permet de chainer toutes les transformations dans un pipeline propre pour structurer notre **Dataframe**.
4. Nous obtenons ainsi un **Dataframe** de taille `(4006,40)` pr√™t pour le Machine Learning 

![](img\bear_data.png){fig-align="center"}

## Machine Learning {background-image="img\bouteille_ecole.png" background-opacity="0.25"}


## Machine Learning - Proc√©dure {.smaller}

1. Deux variables √† pr√©dire : *unit_price* & *type*
2. Utilisation de 6 mod√®les de **Machine Learning**
3. ‚û∂ Optimisation des hyperparam√®tres $\Rightarrow$ `models.py`
4. üèπ Pr√©diction sur les donn√©es de test $\Rightarrow$ `prediction.py`
5. üß™ Utilisation d'un **pipeline** `sklearn`
    - Evite le Data Leakage
    - Proc√©dure standardis√©e pour l'ensemble des mod√®les.

## ML : Optimisation ‚û∂ {.smaller}

1. Choix des **21 variables explicatives**
2. Optimisation des hyperparam√®tres par Cross-Validation

- Avec `optimisation_script.py` on optimise les hyperparam√®tres des mod√®les et on r√©cup√®re sous forme de CSV :
    - Les scores de test et d'entrainement
    - Les √©carts-type $\sigma_{\text{test}}$ et $\sigma_{\text{train}}$
    - Les hyperparam√®tres optimaux pour chaque mod√®le

```CSV
Mod√®le,Score Test,Score Entrainement,Ecart-Type Test,Ecart-Type Train,Param√®tres,Score Test data,Mode
Random Forest,0.934,0.941,0.007,0.007,"{'entrainement__max_depth': 9, 'entrainement__n_estimators': 30, 'imputation__strategy': 'median'}",0.9301745635910225,classification
K Neighbors,0.954,0.965,0.012,0.003,"{'entrainement__n_neighbors': 5, 'imputation__strategy': 'median'}",0.9600997506234414,classification
R√©seaux de neurones,0.976,0.997,0.007,0.001,"{'entrainement__hidden_layer_sizes': (100,), 'entrainement__max_iter': 1000, 'entrainement__solver': 'adam', 'imputation__strategy': 'median'}",0.9800498753117207,classification
Boosting,0.975,1.0,0.009,0.0,"{'entrainement__learning_rate': 0.5, 'entrainement__n_estimators': 200, 'imputation__strategy': 'median'}",0.9812967581047382,classification
Ridge,0.979,0.983,0.009,0.002,"{'entrainement__alpha': 0.015625, 'imputation__strategy': 'mean'}",0.9812967581047382,classification
Support Vector,0.981,0.992,0.008,0.002,"{'entrainement__C': 3.281341424030552, 'imputation__strategy': 'median'}",0.9825436408977556,classification
```

## ML : Pr√©diction üèπ {.smaller} 

- Deux types de pr√©dictions :
    - **Classification** sur le type de vin (Vin Rouge / Blanc / Ros√©)
    - **R√©gression** sur le prix d'une bouteille de vin
- Avec `prediction_script.py` on r√©alise les pr√©dictions avec tous les mod√®les

```csv
name,type,random_forest,boosting,ridge,knn,mlp,support_vector
LES CARLINES 2021 - MAS HAUT BUIS,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge
LA BARGEMONE ROSE 2022 - COMMANDERIE DE LA BARGEMONE,Vin Ros√©,Vin Blanc,Vin Ros√©,Vin Ros√©,Vin Ros√©,Vin Ros√©,Vin Ros√©
TEMPRANILLO 2021- VEGA DEMARA,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge
CH√ÇTEAUNEUF DU PAPE - ALCHIMIE 2020 - DOMAINE DES 3 CELLIER,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge,Vin Rouge
```

- Pour chacun des 800 vins qui n'ont pas servi dans notre Cross Validation on r√©alise une pr√©diction par chacun de nos 6 mod√®les, le tout stock√© dans un fichier CSV !

Afin de visualiser tous nos r√©sultats une application serait id√©ale...

## Application {.smaller} 

## Choix du stockage

<i class="fa-solid fa-database"></i> `duckdb` : La base de donn√©es qui fait *"coin coin"* ü¶Ü

```python
def db_connector() -> DuckDBPyConnection:
    """Se connecte √† la base de donn√©es."""
    connection = duckdb.connect(database=":memory:")
    return connection
```

- `:memory:` $\Rightarrow$ Base de donn√©es **in-memory**
- La base de donn√©es en m√©moire stocke les informations directement dans la m√©moire vive plut√¥t que sur un disque.
- R√©duit le temps n√©cessaire au stockage et √† la consultations des donn√©es, et acc√©l√®re l‚Äôex√©cution des requ√™tes

## Un code de *Deutsche Qualit√§t*

- Docstrings explicites et soign√©es
- Annotations de type claires
- Projet modularis√© 
- Tests des features de l'application
- Poetry 
- Docker

## Annotations de type {.smaller}

```python
def model_rf(x_train: pd.DataFrame, y_train: pd.Series, mode: str) -> GridSearchCV:
    ...
```

parler de `mypy` static type check

## Docstrings {.smaller}

```python
"""`model_rf`: Effectue une recherche exhaustive (Cross-Validation) des meilleurs param√®tres
    en utilisant une Random Forest. Les param√®tres optimis√©s sont :

    - n_estimators
    - max_depth

    ---------
    `Parameters`
    --------- ::

        x_train (pd.DataFrame): # L'ensemble d'entrainement
        y_train (pd.Series): # La variable √† pr√©dire
        mode (str): # regression | classification

    `Raises`
    --------- ::

        ValueError: # Une erreur est lev√©e quand le mode est invalide

    `Returns`
    --------- ::

        GridSearchCV

    `Example(s)`
    ---------

    >>> model_rf(x_train=X_train, y_train=y_train, mode = "regression")
    ... Entrainement du mod√®le : Random Forest
    ... GridSearchCV(estimator=Pipeline(steps=[('imputation', SimpleImputer()),
    ...                                   ('echelle', MinMaxScaler()),
    ...                                   ('entrainement',
    ...                                    RandomForestRegressor())]),
    ...         n_jobs=-1,
    ...         param_grid={'entrainement__max_depth': range(1, 10),
    ...                     'entrainement__n_estimators': range(10, 50, 10),
    ...                     'imputation__strategy': ['mean', 'median',
    ...                                              'most_frequent']},
    ...         return_train_score=True)
    """
```

## R√©f√©rences

- Images : **DALL-E**
